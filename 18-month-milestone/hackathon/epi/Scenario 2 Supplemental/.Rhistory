return(p)
}
# Probability of recovery (not important)
prob_recover <- function(data){
p <- fifelse(data$hosp_time_since_last > 9, 1, 0, na = 0)
return(p)
}
dag.m <- empty_dag() +
node_td("vaccination", type="time_to_event", prob_fun=0.001,
event_duration=1, immunity_duration=Inf,
time_since_last=TRUE) +
node_td("mask", type = "time_to_event",
prob_fun = prob_mask_f,
parents = c("vaccination_time_since_last"),
vacc_duration = 90,
save_past_events=TRUE) +
node_td("covid", type="time_to_event", prob_fun=prob_covid_f,
parents=c("vaccination_time_since_last", "mask_event"),
base_p=0.004, vacc_duration=90, event_duration=10,
mask_multiplier = 0.5,
immunity_duration=90) +
node_td("hosp", type="time_to_event", prob_fun=prob_hosp_f,
parents=c("covid_event", "vaccination_time_since_last"),
event_duration=10, immunity_duration=30,
vacc_duration = 90,
time_since_last = TRUE) +
node_td("recovered", type = "time_to_event", prob_fun = prob_recover,
parents = c("hosp_time_since_last"),
event_duration = Inf, immunity_duration = Inf)
set.seed(42)
sim2 <- sim_discrete_time(dag.m, n_sim=10000, max_t=1000,save_states="all", verbose=T)
# Convert data to long format
sim.dat <- sim2data(sim2, to = "long")
sim.dat.info <- sim.dat %>%
group_by(.time) %>%
summarise(#vaxed.count = sum(vax_status),
covid.count = sum(covid),
hosp.count = sum(hosp),
vacc.count = sum(vaccination),
recovered.count = sum(recovered))
head(sim.dat.info)
tail(sim.dat.info)
covid.na <- sim.dat %>%
filter(is.na(covid)==TRUE)
sim.dat %>%
filter(.id == 5) %>%
filter(.time %in% c(85:100))
sim.dat %>%
filter(.id == 6) %>%
filter(.time %in% c(85:100))
sim.dat %>%
filter(.id == 7) %>%
filter(.time %in% c(85:100))
plot.ts(sim.dat.info$hosp.count)
sim.dat %>%
filter(.id == 5) %>%
filter(.time %in% c(85:100))
sim.dat %>%
filter(.id == 5) %>%
filter(.time %in% c(40:115))
sim.dat %>%
filter(.id == 5) %>%
filter(.time %in% c(40:135))
which(is.na(sim.dat$covid)==T)
################################################################################
# Probability of developing covid
prob_covid_f <- function(data, base_p, vacc_duration, mask_multiplier, sim_time) {
# Define a sequence for vax effectiveness
# seq.vax <- seq(from = 1, to = base_p, length.out = vacc_duration)
p <- fifelse(data$mask_event==TRUE,
yes = fifelse(data$vaccination_time_since_last < vacc_duration,
# Make vax effectiveness decline linearly
#yes = seq.vax[sim_time],
yes = max(base_p, (vacc_duration - data$vaccination_time_since_last)/vacc_duration),
no = base_p*mask_multiplier,
na = base_p),
no = fifelse(data$vaccination_time_since_last < vacc_duration,
# Make vax effectiveness decline linearly
# yes = seq.vax[sim_time],
yes = max(base_p, (vacc_duration - data$vaccination_time_since_last)/vacc_duration),
no = base_p,
na = base_p),
na = base_p)
return(p)
}
prob_hosp_f <- function(data, vacc_duration) {
# Fix this to an fifelse so that hosps work
p <- fifelse(data$covid_event==TRUE,
yes = fifelse(data$vaccination_time_since_last < vacc_duration,
yes = 0.2, no = 0.5, na=0),
no = 0, na=0)
return(p)
}
# Probability of masking:
# If they have covid, they are masking with certainty
# If they still have some immunity, they are masking .25 of the time
# If their immunity has expired, they are masking .5 of the time
prob_mask_f <- function(data, vacc_duration){
p <- fifelse(data$vaccination_time_since_last < vacc_duration, 0.25, 0.5, na = 0.5)
return(p)
}
# Probability of recovery (not important)
prob_recover <- function(data){
p <- fifelse(data$hosp_time_since_last > 9, 1, 0, na = 0)
return(p)
}
dag.m <- empty_dag() +
node_td("vaccination", type="time_to_event", prob_fun=0.001,
event_duration=1, immunity_duration=Inf,
time_since_last=TRUE) +
node_td("mask", type = "time_to_event",
prob_fun = prob_mask_f,
parents = c("vaccination_time_since_last"),
vacc_duration = 90,
save_past_events=TRUE) +
node_td("covid", type="time_to_event", prob_fun=prob_covid_f,
parents=c("vaccination_time_since_last", "mask_event"),
base_p=0.004, vacc_duration=90, event_duration=10,
mask_multiplier = 0.5,
immunity_duration=90) +
node_td("hosp", type="time_to_event", prob_fun=prob_hosp_f,
parents=c("covid_event", "vaccination_time_since_last"),
event_duration=10, immunity_duration=30,
vacc_duration = 90,
time_since_last = TRUE) +
node_td("recovered", type = "time_to_event", prob_fun = prob_recover,
parents = c("hosp_time_since_last"),
event_duration = Inf, immunity_duration = Inf)
set.seed(42)
# Make the simulation
sim2 <- sim_discrete_time(dag.m, n_sim=10000, max_t=1000,save_states="all", verbose=T)
# Convert data to long format
sim.dat <- sim2data(sim2, to = "long")
# Check daily amounts of covid, hospitalizations, vaccinations, recovered
sim.dat.info <- sim.dat %>%
group_by(.time) %>%
summarise(covid.count = sum(covid),
hosp.count = sum(hosp),
vacc.count = sum(vaccination),
recovered.count = sum(recovered))
head(sim.dat.info)
tail(sim.dat.info)
library(data.table)
library(ggplot2)
library(simDAG)
library(dplyr)
################################################################################
# Probability of developing covid
prob_covid_f <- function(data, base_p, vacc_duration, mask_multiplier, sim_time) {
# Define a sequence for vax effectiveness
# seq.vax <- seq(from = 1, to = base_p, length.out = vacc_duration)
p <- fifelse(data$mask_event==TRUE,
yes = fifelse(data$vaccination_time_since_last < vacc_duration,
# Make vax effectiveness decline linearly
#yes = seq.vax[sim_time],
yes = pmax(base_p, (vacc_duration - data$vaccination_time_since_last)/vacc_duration),
no = base_p*mask_multiplier,
na = base_p),
no = fifelse(data$vaccination_time_since_last < vacc_duration,
# Make vax effectiveness decline linearly
# yes = seq.vax[sim_time],
yes = pmax(base_p, (vacc_duration - data$vaccination_time_since_last)/vacc_duration),
no = base_p,
na = base_p),
na = base_p)
return(p)
}
prob_hosp_f <- function(data, vacc_duration) {
# Fix this to an fifelse so that hosps work
p <- fifelse(data$covid_event==TRUE,
yes = fifelse(data$vaccination_time_since_last < vacc_duration,
yes = 0.2, no = 0.5, na=0),
no = 0, na=0)
return(p)
}
# Probability of masking:
# If they have covid, they are masking with certainty
# If they still have some immunity, they are masking .25 of the time
# If their immunity has expired, they are masking .5 of the time
prob_mask_f <- function(data, vacc_duration){
p <- fifelse(data$vaccination_time_since_last < vacc_duration, 0.25, 0.5, na = 0.5)
return(p)
}
# Probability of recovery (not important)
prob_recover <- function(data){
p <- fifelse(data$hosp_time_since_last > 9, 1, 0, na = 0)
return(p)
}
dag.m <- empty_dag() +
node_td("vaccination", type="time_to_event", prob_fun=0.001,
event_duration=1, immunity_duration=Inf,
time_since_last=TRUE) +
node_td("mask", type = "time_to_event",
prob_fun = prob_mask_f,
parents = c("vaccination_time_since_last"),
vacc_duration = 90,
save_past_events=TRUE) +
node_td("covid", type="time_to_event", prob_fun=prob_covid_f,
parents=c("vaccination_time_since_last", "mask_event"),
base_p=0.004, vacc_duration=90, event_duration=10,
mask_multiplier = 0.5,
immunity_duration=90) +
node_td("hosp", type="time_to_event", prob_fun=prob_hosp_f,
parents=c("covid_event", "vaccination_time_since_last"),
event_duration=10, immunity_duration=30,
vacc_duration = 90,
time_since_last = TRUE) +
node_td("recovered", type = "time_to_event", prob_fun = prob_recover,
parents = c("hosp_time_since_last"),
event_duration = Inf, immunity_duration = Inf)
set.seed(42)
# Make the simulation
sim2 <- sim_discrete_time(dag.m, n_sim=10000, max_t=1000,save_states="all", verbose=T)
# Convert data to long format
sim.dat <- sim2data(sim2, to = "long")
# Check daily amounts of covid, hospitalizations, vaccinations, recovered
sim.dat.info <- sim.dat %>%
group_by(.time) %>%
summarise(covid.count = sum(covid),
hosp.count = sum(hosp),
vacc.count = sum(vaccination),
recovered.count = sum(recovered))
head(sim.dat.info)
tail(sim.dat.info)
plot.ts(sim.dat.info$hosp.count)
plot.ts(sim.dat.info$recovered.count)
help(pmax)
pmax(c(.06,.07), c(.08, .09))
plot.ts(sim.dat.info$covid.count)
################################################################################
# Probability of developing covid
prob_covid_f <- function(data, base_p, vacc_duration, mask_multiplier, sim_time) {
# Define a sequence for vax effectiveness
# seq.vax <- seq(from = 1, to = base_p, length.out = vacc_duration)
p <- fifelse(data$mask_event==TRUE,
yes = fifelse(data$vaccination_time_since_last < vacc_duration,
# Make vax effectiveness decline linearly
#yes = seq.vax[sim_time],
yes = pmax(base_p, (vacc_duration - data$vaccination_time_since_last[sim_time])/vacc_duration),
no = base_p*mask_multiplier,
na = base_p),
no = fifelse(data$vaccination_time_since_last < vacc_duration,
# Make vax effectiveness decline linearly
# yes = seq.vax[sim_time],
yes = pmax(base_p, (vacc_duration - data$vaccination_time_since_last[sim_time])/vacc_duration),
no = base_p,
na = base_p),
na = base_p)
return(p)
}
prob_hosp_f <- function(data, vacc_duration) {
# Fix this to an fifelse so that hosps work
p <- fifelse(data$covid_event==TRUE,
yes = fifelse(data$vaccination_time_since_last < vacc_duration,
yes = 0.2, no = 0.5, na=0),
no = 0, na=0)
return(p)
}
# Probability of masking:
# If they have covid, they are masking with certainty
# If they still have some immunity, they are masking .25 of the time
# If their immunity has expired, they are masking .5 of the time
prob_mask_f <- function(data, vacc_duration){
p <- fifelse(data$vaccination_time_since_last < vacc_duration, 0.25, 0.5, na = 0.5)
return(p)
}
# Probability of recovery (not important)
prob_recover <- function(data){
p <- fifelse(data$hosp_time_since_last > 9, 1, 0, na = 0)
return(p)
}
dag.m <- empty_dag() +
node_td("vaccination", type="time_to_event", prob_fun=0.001,
event_duration=1, immunity_duration=Inf,
time_since_last=TRUE) +
node_td("mask", type = "time_to_event",
prob_fun = prob_mask_f,
parents = c("vaccination_time_since_last"),
vacc_duration = 90,
save_past_events=TRUE) +
node_td("covid", type="time_to_event", prob_fun=prob_covid_f,
parents=c("vaccination_time_since_last", "mask_event"),
base_p=0.004, vacc_duration=90, event_duration=10,
mask_multiplier = 0.5,
immunity_duration=90) +
node_td("hosp", type="time_to_event", prob_fun=prob_hosp_f,
parents=c("covid_event", "vaccination_time_since_last"),
event_duration=10, immunity_duration=30,
vacc_duration = 90,
time_since_last = TRUE) +
node_td("recovered", type = "time_to_event", prob_fun = prob_recover,
parents = c("hosp_time_since_last"),
event_duration = Inf, immunity_duration = Inf)
set.seed(42)
# Make the simulation
sim2 <- sim_discrete_time(dag.m, n_sim=10000, max_t=1000,save_states="all", verbose=T)
# Convert data to long format
sim.dat <- sim2data(sim2, to = "long")
# Check daily amounts of covid, hospitalizations, vaccinations, recovered
sim.dat.info <- sim.dat %>%
group_by(.time) %>%
summarise(covid.count = sum(covid),
hosp.count = sum(hosp),
vacc.count = sum(vaccination),
recovered.count = sum(recovered))
head(sim.dat.info)
tail(sim.dat.info)
rm(list = ls())
################################################################################
# Probability of developing covid
prob_covid_f <- function(data, base_p, vacc_duration, mask_multiplier, sim_time) {
# Define a sequence for vax effectiveness
# seq.vax <- seq(from = 1, to = base_p, length.out = vacc_duration)
p <- fifelse(data$mask_event==TRUE,
yes = fifelse(data$vaccination_time_since_last < vacc_duration,
# Make vax effectiveness decline linearly
#yes = seq.vax[sim_time],
yes = pmax(base_p, (vacc_duration - data$vaccination_time_since_last)/vacc_duration),
no = base_p*mask_multiplier,
na = base_p),
no = fifelse(data$vaccination_time_since_last < vacc_duration,
# Make vax effectiveness decline linearly
# yes = seq.vax[sim_time],
yes = pmax(base_p, (vacc_duration - data$vaccination_time_since_last)/vacc_duration),
no = base_p,
na = base_p),
na = base_p)
return(p)
}
prob_hosp_f <- function(data, vacc_duration) {
# Fix this to an fifelse so that hosps work
p <- fifelse(data$covid_event==TRUE,
yes = fifelse(data$vaccination_time_since_last < vacc_duration,
yes = 0.2, no = 0.5, na=0),
no = 0, na=0)
return(p)
}
# Probability of masking:
# If they have covid, they are masking with certainty
# If they still have some immunity, they are masking .25 of the time
# If their immunity has expired, they are masking .5 of the time
prob_mask_f <- function(data, vacc_duration){
p <- fifelse(data$vaccination_time_since_last < vacc_duration, 0.25, 0.5, na = 0.5)
return(p)
}
# Probability of recovery (not important)
prob_recover <- function(data){
p <- fifelse(data$hosp_time_since_last > 9, 1, 0, na = 0)
return(p)
}
dag.m <- empty_dag() +
node_td("vaccination", type="time_to_event", prob_fun=0.001,
event_duration=1, immunity_duration=Inf,
time_since_last=TRUE) +
node_td("mask", type = "time_to_event",
prob_fun = prob_mask_f,
parents = c("vaccination_time_since_last"),
vacc_duration = 90,
save_past_events=TRUE) +
node_td("covid", type="time_to_event", prob_fun=prob_covid_f,
parents=c("vaccination_time_since_last", "mask_event"),
base_p=0.004, vacc_duration=90, event_duration=10,
mask_multiplier = 0.5,
immunity_duration=90) +
node_td("hosp", type="time_to_event", prob_fun=prob_hosp_f,
parents=c("covid_event", "vaccination_time_since_last"),
event_duration=10, immunity_duration=30,
vacc_duration = 90,
time_since_last = TRUE) +
node_td("recovered", type = "time_to_event", prob_fun = prob_recover,
parents = c("hosp_time_since_last"),
event_duration = Inf, immunity_duration = Inf)
set.seed(42)
# Make the simulation
sim2 <- sim_discrete_time(dag.m, n_sim=10000, max_t=1000,save_states="all", verbose=T)
# Convert data to long format
sim.dat <- sim2data(sim2, to = "long")
# Check daily amounts of covid, hospitalizations, vaccinations, recovered
sim.dat.info <- sim.dat %>%
group_by(.time) %>%
summarise(covid.count = sum(covid),
hosp.count = sum(hosp),
vacc.count = sum(vaccination),
recovered.count = sum(recovered))
head(sim.dat.info)
tail(sim.dat.info)
plot.ts(sim.dat.info$hosp.count)
plot.ts(sim.dat.info$recovered.count)
head(sim2)
head(sim.dat)
tail(sim.dat)
# Check daily amounts of covid, hospitalizations, vaccinations, recovered
sim.dat.info <- sim.dat %>%
group_by(.time) %>%
summarise(covid.count = sum(covid),
hosp.count = sum(hosp),
vacc.count = sum(vaccination),
recovered.count = sum(recovered))
head(sim.dat.info)
tail(sim.dat.info)
getwd()
setwd("~/OneDrive - The MITRE Corporation/Documents (ASKEM)/General/ASKEM/Evaluations/18mo milestone/Epi/FINAL/Question 2")
getwd()
################################################################################
# Write datasets
write_csv(x = sim.dat, file = "full-fixed-vax.csv")
library(readr)
c
################################################################################
# Write datasets
write_csv(x = sim.dat, file = "full-fixed-vax.csv")
write_csv(x = sim.dat.info, file = "daily-summary-fixed-vax.csv")
mean(.0005, .01)
mean(c(.0005, .01))
rm(list = ls())
library(data.table)
library(ggplot2)
library(simDAG)
library(dplyr)
library(readr)
# Updated February 16, 2024 to add statements to write data
setwd("~/OneDrive - The MITRE Corporation/Documents (ASKEM)/General/ASKEM/Evaluations/18mo milestone/Epi/FINAL/Question 2")
# RANDOM amount can be vaxed everyday, not fixed
################################################################################
# Probability of developing covid
prob_covid_f <- function(data, base_p, vacc_duration, mask_multiplier, sim_time) {
# Define a sequence for vax effectiveness
# seq.vax <- seq(from = 1, to = base_p, length.out = vacc_duration)
p <- fifelse(data$mask_event==TRUE,
yes = fifelse(data$vaccination_time_since_last < vacc_duration,
# Make vax effectiveness decline linearly
#yes = seq.vax[sim_time],
yes = pmax(base_p, (vacc_duration - data$vaccination_time_since_last)/vacc_duration),
no = base_p*mask_multiplier,
na = base_p),
no = fifelse(data$vaccination_time_since_last < vacc_duration,
# Make vax effectiveness decline linearly
# yes = seq.vax[sim_time],
yes = pmax(base_p, (vacc_duration - data$vaccination_time_since_last)/vacc_duration),
no = base_p,
na = base_p),
na = base_p)
return(p)
}
prob_hosp_f <- function(data, vacc_duration) {
# Fix this to an fifelse so that hosps work
p <- fifelse(data$covid_event==TRUE,
yes = fifelse(data$vaccination_time_since_last < vacc_duration,
yes = 0.2, no = 0.5, na=0),
no = 0, na=0)
return(p)
}
# Probability of masking:
# If they have covid, they are masking with certainty
# If they still have some immunity, they are masking .25 of the time
# If their immunity has expired, they are masking .5 of the time
prob_mask_f <- function(data, vacc_duration){
p <- fifelse(data$vaccination_time_since_last < vacc_duration, 0.25, 0.5, na = 0.5)
return(p)
}
# Probability of recovery (not important)
prob_recover <- function(data){
p <- fifelse(data$hosp_time_since_last > 9, 1, 0, na = 0)
return(p)
}
prob_vax <- function(data){
p <- runif(n = 1, min = .0005, max = .01)
}
dag.m <- empty_dag() +
node_td("vaccination", type="time_to_event", prob_fun=prob_vax,
event_duration=1, immunity_duration=Inf,
time_since_last=TRUE) +
node_td("mask", type = "time_to_event",
prob_fun = prob_mask_f,
parents = c("vaccination_time_since_last"),
vacc_duration = 90,
save_past_events=TRUE) +
node_td("covid", type="time_to_event", prob_fun=prob_covid_f,
parents=c("vaccination_time_since_last", "mask_event"),
base_p=0.004, vacc_duration=90, event_duration=10,
mask_multiplier = 0.5,
immunity_duration=90) +
node_td("hosp", type="time_to_event", prob_fun=prob_hosp_f,
parents=c("covid_event", "vaccination_time_since_last"),
event_duration=10, immunity_duration=30,
vacc_duration = 90,
time_since_last = TRUE) +
node_td("recovered", type = "time_to_event", prob_fun = prob_recover,
parents = c("hosp_time_since_last"),
event_duration = Inf, immunity_duration = Inf)
set.seed(42)
# Make the simulation
sim2 <- sim_discrete_time(dag.m, n_sim=10000, max_t=1000,save_states="all", verbose=T)
# Convert data to long format
sim.dat <- sim2data(sim2, to = "long")
# Check daily amounts of covid, hospitalizations, vaccinations, recovered
sim.dat.info <- sim.dat %>%
group_by(.time) %>%
summarise(covid.count = sum(covid),
hosp.count = sum(hosp),
vacc.count = sum(vaccination),
recovered.count = sum(recovered))
head(sim.dat.info)
tail(sim.dat.info)
plot.ts(sim.dat.info$hosp.count)
plot.ts(sim.dat.info$recovered.count)
################################################################################
# Write datasets
write_csv(x = sim.dat, file = "full-random-vax.csv")
write_csv(x = sim.dat.info, file = "daily-summary-random-vax.csv")
help(node_td)
rm(list = ls())
