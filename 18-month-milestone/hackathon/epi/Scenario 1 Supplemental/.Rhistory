gg.df$task <- rep(task.names, rep(nrow(mod5), 15))
gg.df$task <- factor(gg.df$task, levels = rev(task.names))
give.n <- function(x){
return(c(y = median(x)*1.10, label = length(x)))
# experiment with the multiplier to find the perfect position
}
give.n2 <- function(x){
return(data.frame(y = median(x)*1.30, label = paste0("n = ",length(x))))
# experiment with the multiplier to find the perfect position
}
ggplot(gg.df, aes(y = task, x = value, fill = task)) +
geom_boxplot() +
#geom_violin() +
#geom_boxplot(width = 0.1) +
coord_cartesian(xlim = c(0, 30)) +
labs(title = "Boxplot of bottleneck timing responses (days)",
subtitle = "All responses",
x = "Bottleneck time (days)",
y = "Task of interest") +
scale_x_continuous(breaks = c(0,7,14,21,28)) +
theme(legend.position="none") +
stat_summary(fun.data = give.n2, geom = "text", fun = median,
position = position_dodge(width = 0.75)) +
theme(axis.text.y=element_text(size=rel(1.5)))
library(ggplot2)
ggplot(gg.df, aes(y = task, x = value, fill = task)) +
geom_boxplot() +
#geom_violin() +
#geom_boxplot(width = 0.1) +
coord_cartesian(xlim = c(0, 30)) +
labs(title = "Boxplot of bottleneck timing responses (days)",
subtitle = "All responses",
x = "Bottleneck time (days)",
y = "Task of interest") +
scale_x_continuous(breaks = c(0,7,14,21,28)) +
theme(legend.position="none") +
stat_summary(fun.data = give.n2, geom = "text", fun = median,
position = position_dodge(width = 0.75)) +
theme(axis.text.y=element_text(size=rel(1.5)))
# First, do the simulation for the UK
pop <- get_population("United Kingdom")
# Load squire
library(squire)
# First, do the simulation for the UK
pop <- get_population("United Kingdom")
pop
# Get the mixing matrix
contact_matrix <- get_mixing_matrix("United Kingdom")
setwd("~/OneDrive - The MITRE Corporation/Documents (ASKEM)/General/ASKEM/Evaluations/18mo milestone/Epi/FINAL/Question 1")
################################################################################
# Set working directory to write the files
setwd("~/OneDrive - The MITRE Corporation/Documents (ASKEM)/General/ASKEM/Evaluations/18mo milestone/Epi/FINAL/Question 1")
population <- pop$n
# First, do the simulation for the UK
pop <- get_population("United Kingdom")
population <- pop$n
# First, do the simulation for the UK
pop <- get_population("United Kingdom")
population <- pop$n
# First, do the simulation for the UK
pop <- get_population("United Kingdom")
population <- pop$n
# Get the mixing matrix
contact_matrix <- get_mixing_matrix("United Kingdom")
pop
popul
population
write.csv(x = pop, file = "UKpopulation.csv")
library(readr)
write_csv(x = pop, file = "UKpopulation.csv")
# Get the mixing matrix
contact_matrix <- get_mixing_matrix("United Kingdom")
write_csv(x = contact_matrix, file = "UK_contact_matrix.csv")
class(contact_matrix)
head(contact_matrix)
as.data.frame(contact_matrix)
write_csv(x = as.data.frame(contact_matrix), file = "UK_contact_matrix.csv")
write.csv(x = as.data.frame(contact_matrix), file = "UK_contact_matrix.csv")
write.csv(x = pop, file = "UKpopulation.csv")
# First, do the simulation for the UK
pop <- get_population("United Kingdom")
population <- pop$n
# Get the mixing matrix
contact_matrix <- get_mixing_matrix("United Kingdom")
write.csv(x = as.data.frame(contact_matrix), file = "UK_contact_matrix.csv")
write.csv(x = pop, file = "UKpopulation.csv")
################################################################################
# Next, do France
# Consider using this package and/or simDAG for different scenarios
pop2 <- get_population("France")
cm2 <- get_mixing_matrix("France")
write.csv(x = as.data.frame(cm2), file = "France_contact_matrix.csv")
write.csv(x = pop2, file = "France_population.csv")
pop3 <- get_population("Afghanistan")
cm3 <- get_mixing_matrix("Afghanistan")
write.csv(x = as.data.frame(cm3), file = "Afghanistan_contact_matrix.csv")
write.csv(x = pop3, file = "Afghanistan_population.csv")
pop4 <- get_population("Colombia")
cm4 <- get_mixing_matrix("Colombia")
write.csv(x = as.data.frame(cm4), file = "Colombia_contact_matrix.csv")
write.csv(x = pop4, file = "Colombia_population.csv")
rm(list = ls())
# First, do the simulation for the UK
pop <- get_population("United Kingdom")
population <- pop$n
rm(list = ls())
rm(list = ls())
# First, do the simulation for the UK
pop <- get_population("United Kingdom")
population <- pop$n
# Get the mixing matrix
contact_matrix <- get_mixing_matrix("United Kingdom")
scale.matrix <- matrix(0.6, nrow = 16, ncol = 16)
scale.matrix[14:16,14:16 ] <- 0.3
uk.scale <- contact_matrix*scale.matrix
# Increase scalar on contact matrix and give 20 days between the interventions
r <- run_explicit_SEEIR_model(population = population,
tt_contact_matrix = c(0, 60),
contact_matrix_set = list(contact_matrix,
uk.scale),
tt_R0 = c(0,40, 100),
R0 = c(2.5, 0.9, 2),
time_period = 200,
dt = 0.1,
replicates = 5)
r
################################################################################
uk.out <- format_output(r, var_select = "I", reduce_age = FALSE)
################################################################################
uk.out <- format_output(r, var_select = "infections", reduce_age = FALSE)
head(uk.out)
tail(uk.out)
# First, do the simulation for the UK
pop <- get_population("United Kingdom")
population <- pop$n
# Get the mixing matrix
contact_matrix <- get_mixing_matrix("United Kingdom")
scale.matrix <- matrix(0.6, nrow = 16, ncol = 16)
scale.matrix[14:16,14:16 ] <- 0.3
uk.scale <- contact_matrix*scale.matrix
# Increase scalar on contact matrix and give 20 days between the interventions
r <- run_explicit_SEEIR_model(population = population,
tt_contact_matrix = c(0, 60),
contact_matrix_set = list(contact_matrix,
uk.scale),
tt_R0 = c(0,40, 100),
R0 = c(2.5, 0.9, 2),
time_period = 200,
dt = 0.1,
replicates = 10)
plot(r, var_select = c("infections","deaths"))
################################################################################
# Next, do France
# Consider using this package and/or simDAG for different scenarios
pop2 <- get_population("France")$n
cm2 <- get_mixing_matrix("France")
r2 <- run_explicit_SEEIR_model(population = pop2,
tt_contact_matrix = c(0, 60),
contact_matrix_set = list(cm2,
cm2*scale.matrix),
tt_R0 = c(0,40,100),
R0 = c(2.5, 0.9, 1.8),
time_period = 200,
dt = 0.1,
replicates = 10)
plot(r2, var_select = "infections")
pop3 <- get_population("Afghanistan")$n
cm3 <- get_mixing_matrix("Afghanistan")
r3 <- run_explicit_SEEIR_model(population = pop3,
tt_contact_matrix = c(0, 60),
contact_matrix_set = list(cm3,
cm3*scale.matrix),
tt_R0 = c(0,40, 100),
R0 = c(2.5, 0.9, 1.9),
time_period = 200,
dt = 0.1,
replicates = 10)
plot(r3, var_select = "infections")
pop4 <- get_population("Colombia")$n
cm4 <- get_mixing_matrix("Colombia")
r4 <- run_explicit_SEEIR_model(population = pop4,
tt_contact_matrix = c(0, 60),
contact_matrix_set = list(cm4,
cm4*scale.matrix),
tt_R0 = c(0,40, 100),
R0 = c(2.5, 0.9, 2),
time_period = 200,
dt = 0.1,
replicates = 10)
plot(r4, var_select = "infections", summarise = TRUE)
r4 <- run_explicit_SEEIR_model(population = pop4,
tt_contact_matrix = c(0, 60),
contact_matrix_set = list(cm4,
cm4*scale.matrix),
tt_R0 = c(0,40, 100),
R0 = c(2.5, 0.9, 2),
time_period = 200,
dt = 0.1,
replicates = 10)
################################################################################
uk.out <- format_output(r, var_select = "infections", reduce_age = FALSE)
head(uk.out)
dim(uk.out)
# Increase scalar on contact matrix and give 20 days between the interventions
r <- run_explicit_SEEIR_model(population = population,
tt_contact_matrix = c(0, 60),
contact_matrix_set = list(contact_matrix,
uk.scale),
tt_R0 = c(0,40, 100),
R0 = c(2.5, 0.9, 2),
time_period = 200,
dt = 0.2,
replicates = 10)
r2 <- run_explicit_SEEIR_model(population = pop2,
tt_contact_matrix = c(0, 60),
contact_matrix_set = list(cm2,
cm2*scale.matrix),
tt_R0 = c(0,40,100),
R0 = c(2.5, 0.9, 1.8),
time_period = 200,
dt = 0.2,
replicates = 10)
r3 <- run_explicit_SEEIR_model(population = pop3,
tt_contact_matrix = c(0, 60),
contact_matrix_set = list(cm3,
cm3*scale.matrix),
tt_R0 = c(0,40, 100),
R0 = c(2.5, 0.9, 1.9),
time_period = 200,
dt = 0.2,
replicates = 10)
r4 <- run_explicit_SEEIR_model(population = pop4,
tt_contact_matrix = c(0, 60),
contact_matrix_set = list(cm4,
cm4*scale.matrix),
tt_R0 = c(0,40, 100),
R0 = c(2.5, 0.9, 2),
time_period = 200,
dt = 0.2,
replicates = 10)
################################################################################
uk.out <- format_output(r, var_select = "infections", reduce_age = FALSE)
################################################################################
uk.out <- format_output(r, var_select = "infections", reduce_age = FALSE)
head(uk.out)
################################################################################
uk.out <- format_output(r, var_select = "infections", reduce_age = FALSE)
france.out <- format_output(r2, var_select = "infections", reduce_age = FALSE)
colombia.out <- format_output(r3, var_select = "infections", reduce_age = FALSE)
afghanistan.out <- format_output(r4, var_select = "infections", reduce_age = FALSE)
getwd()
write.csv(uk.out, file = "UK_infections.csv")
################################################################################
uk.out <- format_output(r, var_select = "infections", reduce_age = FALSE)
france.out <- format_output(r2, var_select = "infections", reduce_age = FALSE)
afghanistan.out <- format_output(r3, var_select = "infections", reduce_age = FALSE)
colombia.out <- format_output(r4, var_select = "infections", reduce_age = FALSE)
write.csv(uk.out, file = "UK_infections.csv")
write.csv(france.out, file = "France_infections.csv")
write.csv(afghanistan.out, file = "Afghanistan_infections.csv")
write.csv(colombia.out, file = "Colombia_infections.csv")
rm(list = ls(0))
rm(list = ls())
x <- 1:90
(90 - x)/90
1 - ((90 - x)/90)
1 - ((90 - x)/90) * .05
vacc_duration = 90
seq.vax <- seq(from = 1, to = base_p, length.out = vacc_duration)
base_p = .002
seq.vax <- seq(from = 1, to = base_p, length.out = vacc_duration)
seq.vax
################################################################################
# Probability of developing covid
prob_covid <- function(data, base_p, vacc_duration, mask_multiplier) {
# Define a sequence for vax effectiveness
seq.vax <- seq(from = 1, to = base_p, length.out = vacc_duration)
if(data$mask_event == TRUE){
p <- fifelse(data$vaccination_time_since_last < vacc_duration,
# (1 - ((vacc_duration - data$vaccination_time_since_last)/vacc_duration))*base_p,
yes = seq.vax[data$vaccination_time_since_last],
base_p*mask_multiplier,
na=base_p)
} else {
p <- fifelse(data$vaccination_time_since_last < vacc_duration,
# (1 - ((vacc_duration - data$vaccination_time_since_last)/vacc_duration))*base_p,
yes = seq.vax[data$vaccination_time_since_last],
base_p,
na=base_p)
}
return(p)
}
prob_covid_f <- function(data, base_p, vacc_duration, mask_multiplier) {
# Define a sequence for vax effectiveness
seq.vax <- seq(from = 1, to = base_p, length.out = vacc_duration)
p <- fifelse(data$mask_event==TRUE,
yes = fifelse(data$vaccination_time_since_last < vacc_duration,
#yes = (1 - ((vacc_duration - data$vaccination_time_since_last)/vacc_duration))*base_p,
# Make vax effectiveness decline linearly
yes = seq.vax[data$vaccination_time_since_last],
no = base_p*mask_multiplier,
na=base_p),
no = fifelse(data$vaccination_time_since_last < vacc_duration,
#yes = (1 - ((vacc_duration - data$vaccination_time_since_last)/vacc_duration))*base_p,
# Make vax effectiveness decline linearly
yes = seq.vax[data$vaccination_time_since_last],
no = base_p,
na = base_p))
#
# if(data$mask_event == TRUE){
#   p <- fifelse(data$vaccination_time_since_last < vacc_duration,
#                0, base_p*mask_multiplier, na=base_p)
# } else {
#   p <- fifelse(data$vaccination_time_since_last < vacc_duration,
#                0, base_p, na=base_p)
# }
return(p)
}
prob_hosp_f <- function(data, vacc_duration) {
# Fix this to an fifelse so that hosps don't get out of whack
p <- fifelse(data$covid_event==TRUE,
yes = fifelse(data$vaccination_time_since_last < vacc_duration,
yes = 0.2, no = 0.5, na=0),
no = 0, na=0)
# if(data$covid_event == TRUE){
#   p <- fifelse(data$vaccination_time_since_last < vacc_duration, 0.2, 0.5, na = 0)
#   #p <- fifelse(data$covid_event == TRUE, 0.4, 0, na = base_p)
# } else {
#   p <- 0
# }
return(p)
}
# Probability of masking:
# If they have covid, they are masking with certainty
# If they still have some immunity, they are masking .25 of the time
# If their immunity has expired, they are masking .5 of the time
prob_mask <- function(data, vacc_duration){
if(!is.na(data$vaccination_time_since_last)){
p <- ifelse(data$vaccination_time_since_last < vacc_duration, 0.25, 0.5)
} else {
p <- 0.5
}
return(p)
}
prob_mask_f <- function(data, vacc_duration){
p <- fifelse(data$vaccination_time_since_last < vacc_duration, 0.25, 0.5, na = 0.5)
return(p)
}
prob_recover <- function(data){
p <- fifelse(data$hosp_time_since_last > 9, 1, 0, na = 0)
return(p)
}
dag.m <- empty_dag() +
node_td("vaccination", type="time_to_event", prob_fun=0.001,
event_duration=1, immunity_duration=Inf,
time_since_last=TRUE) +
node_td("mask", type = "time_to_event",
prob_fun = prob_mask_f,
parents = c("vaccination_time_since_last"),
vacc_duration = 90,
save_past_events=TRUE) +
node_td("covid", type="time_to_event", prob_fun=prob_covid_f,
parents=c("vaccination_time_since_last", "mask_event"),
base_p=0.004, vacc_duration=90, event_duration=10,
mask_multiplier = 0.5,
immunity_duration=90) +
node_td("hosp", type="time_to_event", prob_fun=prob_hosp_f,
parents=c("covid_event", "vaccination_time_since_last"),
event_duration=10, immunity_duration=30,
vacc_duration = 90,
time_since_last = TRUE) +
node_td("recovered", type = "time_to_event", prob_fun = prob_recover,
parents = c("hosp_time_since_last"),
event_duration = Inf, immunity_duration = Inf)
set.seed(42)
# plot(dag, mark_td_nodes=FALSE)
plot(dag.m, mark_td_nodes=TRUE)
dag.m <- empty_dag() +
node_td("vaccination", type="time_to_event", prob_fun=0.001,
event_duration=1, immunity_duration=Inf,
time_since_last=TRUE) +
node_td("mask", type = "time_to_event",
prob_fun = prob_mask_f,
parents = c("vaccination_time_since_last"),
vacc_duration = 90,
save_past_events=TRUE) +
node_td("covid", type="time_to_event", prob_fun=prob_covid_f,
parents=c("vaccination_time_since_last", "mask_event"),
base_p=0.004, vacc_duration=90, event_duration=10,
mask_multiplier = 0.5,
immunity_duration=90) +
node_td("hosp", type="time_to_event", prob_fun=prob_hosp_f,
parents=c("covid_event", "vaccination_time_since_last"),
event_duration=10, immunity_duration=30,
vacc_duration = 90,
time_since_last = TRUE) +
node_td("recovered", type = "time_to_event", prob_fun = prob_recover,
parents = c("hosp_time_since_last"),
event_duration = Inf, immunity_duration = Inf)
library(data.table)
library(ggplot2)
library(simDAG)
rm(list = ls())
library(data.table)
library(ggplot2)
library(simDAG)
################################################################################
# Probability of developing covid
prob_covid <- function(data, base_p, vacc_duration, mask_multiplier) {
# Define a sequence for vax effectiveness
seq.vax <- seq(from = 1, to = base_p, length.out = vacc_duration)
if(data$mask_event == TRUE){
p <- fifelse(data$vaccination_time_since_last < vacc_duration,
# (1 - ((vacc_duration - data$vaccination_time_since_last)/vacc_duration))*base_p,
yes = seq.vax[data$vaccination_time_since_last],
base_p*mask_multiplier,
na=base_p)
} else {
p <- fifelse(data$vaccination_time_since_last < vacc_duration,
# (1 - ((vacc_duration - data$vaccination_time_since_last)/vacc_duration))*base_p,
yes = seq.vax[data$vaccination_time_since_last],
base_p,
na=base_p)
}
return(p)
}
prob_covid_f <- function(data, base_p, vacc_duration, mask_multiplier) {
# Define a sequence for vax effectiveness
seq.vax <- seq(from = 1, to = base_p, length.out = vacc_duration)
p <- fifelse(data$mask_event==TRUE,
yes = fifelse(data$vaccination_time_since_last < vacc_duration,
#yes = (1 - ((vacc_duration - data$vaccination_time_since_last)/vacc_duration))*base_p,
# Make vax effectiveness decline linearly
yes = seq.vax[data$vaccination_time_since_last],
no = base_p*mask_multiplier,
na=base_p),
no = fifelse(data$vaccination_time_since_last < vacc_duration,
#yes = (1 - ((vacc_duration - data$vaccination_time_since_last)/vacc_duration))*base_p,
# Make vax effectiveness decline linearly
yes = seq.vax[data$vaccination_time_since_last],
no = base_p,
na = base_p))
#
# if(data$mask_event == TRUE){
#   p <- fifelse(data$vaccination_time_since_last < vacc_duration,
#                0, base_p*mask_multiplier, na=base_p)
# } else {
#   p <- fifelse(data$vaccination_time_since_last < vacc_duration,
#                0, base_p, na=base_p)
# }
return(p)
}
prob_hosp_f <- function(data, vacc_duration) {
# Fix this to an fifelse so that hosps don't get out of whack
p <- fifelse(data$covid_event==TRUE,
yes = fifelse(data$vaccination_time_since_last < vacc_duration,
yes = 0.2, no = 0.5, na=0),
no = 0, na=0)
# if(data$covid_event == TRUE){
#   p <- fifelse(data$vaccination_time_since_last < vacc_duration, 0.2, 0.5, na = 0)
#   #p <- fifelse(data$covid_event == TRUE, 0.4, 0, na = base_p)
# } else {
#   p <- 0
# }
return(p)
}
# Probability of masking:
# If they have covid, they are masking with certainty
# If they still have some immunity, they are masking .25 of the time
# If their immunity has expired, they are masking .5 of the time
prob_mask <- function(data, vacc_duration){
if(!is.na(data$vaccination_time_since_last)){
p <- ifelse(data$vaccination_time_since_last < vacc_duration, 0.25, 0.5)
} else {
p <- 0.5
}
return(p)
}
prob_mask_f <- function(data, vacc_duration){
p <- fifelse(data$vaccination_time_since_last < vacc_duration, 0.25, 0.5, na = 0.5)
return(p)
}
prob_recover <- function(data){
p <- fifelse(data$hosp_time_since_last > 9, 1, 0, na = 0)
return(p)
}
dag.m <- empty_dag() +
node_td("vaccination", type="time_to_event", prob_fun=0.001,
event_duration=1, immunity_duration=Inf,
time_since_last=TRUE) +
node_td("mask", type = "time_to_event",
prob_fun = prob_mask_f,
parents = c("vaccination_time_since_last"),
vacc_duration = 90,
save_past_events=TRUE) +
node_td("covid", type="time_to_event", prob_fun=prob_covid_f,
parents=c("vaccination_time_since_last", "mask_event"),
base_p=0.004, vacc_duration=90, event_duration=10,
mask_multiplier = 0.5,
immunity_duration=90) +
node_td("hosp", type="time_to_event", prob_fun=prob_hosp_f,
parents=c("covid_event", "vaccination_time_since_last"),
event_duration=10, immunity_duration=30,
vacc_duration = 90,
time_since_last = TRUE) +
node_td("recovered", type = "time_to_event", prob_fun = prob_recover,
parents = c("hosp_time_since_last"),
event_duration = Inf, immunity_duration = Inf)
set.seed(42)
# plot(dag, mark_td_nodes=FALSE)
plot(dag.m, mark_td_nodes=TRUE)
sim2 <- sim_discrete_time(dag.m, n_sim=10000, max_t=1000,save_states="all", verbose=T)
